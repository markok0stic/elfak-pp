
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 22 19:44:42 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;
import java_cup.runtime.Scanner;

/** CUP v0.10k generated parser.
  * @version Thu Dec 22 19:44:42 CET 2022
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\003\006\000\002\002\004\000\002\004" +
    "\006\000\002\005\004\000\002\005\002\000\002\006\005" +
    "\000\002\020\005\000\002\020\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\007\004\000\002" +
    "\007\003\000\002\010\003\000\002\010\006\000\002\010" +
    "\003\000\002\011\011\000\002\012\004\000\002\012\003" +
    "\000\002\013\006\000\002\017\005\000\002\017\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\004\005\001\002\000\004\002\066\001" +
    "\002\000\004\015\006\001\002\000\004\016\007\001\002" +
    "\000\004\017\011\001\002\000\004\002\001\001\002\000" +
    "\016\005\ufffd\006\ufffd\007\ufffd\010\ufffd\017\ufffd\025\ufffd" +
    "\001\002\000\016\005\014\006\024\007\025\010\023\017" +
    "\011\025\021\001\002\000\004\025\061\001\002\000\004" +
    "\025\ufff9\001\002\000\014\010\ufff2\011\ufff2\017\ufff2\020" +
    "\ufff2\025\ufff2\001\002\000\012\010\023\017\011\020\060" +
    "\025\021\001\002\000\016\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\017\ufffe\025\ufffe\001\002\000\012\010\ufff5\017\ufff5" +
    "\020\ufff5\025\ufff5\001\002\000\004\021\054\001\002\000" +
    "\014\010\ufff4\011\ufff4\017\ufff4\020\ufff4\025\ufff4\001\002" +
    "\000\004\015\026\001\002\000\004\025\ufff8\001\002\000" +
    "\004\025\ufff7\001\002\000\010\012\027\015\033\025\030" +
    "\001\002\000\012\013\uffe8\014\uffe8\016\uffe8\022\uffe8\001" +
    "\002\000\012\013\uffe9\014\uffe9\016\uffe9\022\uffe9\001\002" +
    "\000\012\013\uffec\014\uffec\016\uffec\022\uffec\001\002\000" +
    "\010\013\037\014\040\016\042\001\002\000\010\012\027" +
    "\015\033\025\030\001\002\000\010\013\037\014\040\016" +
    "\035\001\002\000\012\013\uffe7\014\uffe7\016\uffe7\022\uffe7" +
    "\001\002\000\010\012\027\015\033\025\030\001\002\000" +
    "\010\012\uffeb\015\uffeb\025\uffeb\001\002\000\010\012\uffea" +
    "\015\uffea\025\uffea\001\002\000\012\013\uffed\014\uffed\016" +
    "\uffed\022\uffed\001\002\000\004\017\043\001\002\000\004" +
    "\011\046\001\002\000\006\011\uffef\020\uffef\001\002\000" +
    "\006\011\046\020\053\001\002\000\004\012\047\001\002" +
    "\000\004\024\050\001\002\000\010\010\023\017\011\025" +
    "\021\001\002\000\006\011\uffee\020\uffee\001\002\000\006" +
    "\011\ufff0\020\ufff0\001\002\000\014\010\ufff1\011\ufff1\017" +
    "\ufff1\020\ufff1\025\ufff1\001\002\000\010\012\027\015\033" +
    "\025\030\001\002\000\010\013\037\014\040\022\056\001" +
    "\002\000\014\010\ufff3\011\ufff3\017\ufff3\020\ufff3\025\ufff3" +
    "\001\002\000\012\010\ufff6\017\ufff6\020\ufff6\025\ufff6\001" +
    "\002\000\016\002\uffff\010\uffff\011\uffff\017\uffff\020\uffff" +
    "\025\uffff\001\002\000\006\022\ufffa\023\ufffa\001\002\000" +
    "\006\022\064\023\063\001\002\000\004\025\065\001\002" +
    "\000\016\005\ufffc\006\ufffc\007\ufffc\010\ufffc\017\ufffc\025" +
    "\ufffc\001\002\000\006\022\ufffb\023\ufffb\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\016\004" +
    "\014\006\016\007\015\010\017\011\021\016\012\001\001" +
    "\000\004\020\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\014\010\056\011\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\030\017\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\035\001\001" +
    "\000\006\015\030\017\033\001\001\000\004\014\035\001" +
    "\001\000\002\001\001\000\004\015\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\044\013\043\001\001\000\002\001\001" +
    "\000\004\013\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\014\010\050\011\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\030\017\054\001\001\000\004\014\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

symbolTable = new SymbolTable();

    }


 public int errNo = 0;
 public int warnNo = 0;
 SymbolTable symbolTable;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

   public void syntax_error(Symbol cur_token)
   {

   }

   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }

   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

   public void checkWarnings()
   {
    SymbolNode current = symbolTable.getVariables();
    while ( current != null )
    {
        Variable var = ( Variable ) current;
        if ( var.last_def == -1 && var.last_use == -1 )
        {
            System.out.println("Upozorenje: Promenljiva " + var.name + "je deklarisana, ali se ne koristi.");
            warnNo++;
        }
        else if ( var.last_def > var.last_use )
            {
                System.out.println(
                "Upozorenje: Vrednost dodeljena prom. "
                + var.name + " u liniji " + var.last_def +
                " se nigde ne koristi." );
                warnNo++;
            }
        current = current.next;
    }
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Constant ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
               RESULT = new Constant(parser.symbolTable.getType("char"), c );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Constant*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Constant ::= FLOATCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                RESULT = new Constant(parser.symbolTable.getType("float"), c );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Constant*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Constant ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                 RESULT = new Constant(parser.symbolTable.getType("integer"), c );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Constant*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Term ::= CONST 
            {
              Object RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Term ::= ID 
            {
              Object RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AddOperator ::= MINUS 
            {
              Object RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AddOperator ::= PLUS 
            {
              Object RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Term 
            {
              Type RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression AddOperator Term 
            {
              Type RESULT = null;
		
  /*           if ( i1.tkind == Type.CHARACTER ||
             i2.tkind = Type.INTEGER )
             {
             System.out.println("Ggreska u liniji " +
             parser.getLine() + ": " +
             "Operator + se ne moze primeniti nad operandima tipa " +
             i1.name + " i " + i2.name );
             parser.errNo++;
             }
             RESULT=parser.symbolTable.getType("integer");*/
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WhenStatement ::= WHEN CONST COLON Statement 
            {
              Object RESULT = null;
		
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // WhenStatementList ::= WhenStatement 
            {
              Object RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WhenStatementList ::= WhenStatementList WhenStatement 
            {
              Object RESULT = null;
		
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTCURLYPAR WhenStatementList RIGHTCURLYPAR 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		
                              if ( i.tkind != Type.INTEGER || i.tkind != Type.CHARACTER)
                              {
                              System.out.println("Greska u liniji " +
                              parser.getLine() + ": " +
                              "Uslov ne moze biti tipa " + i.name );
                              parser.errNo++;
                              }
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Block 
            {
              Object RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
              Variable var = parser.symbolTable.getVar(ime);
              if ( var == null )
              {
              System.out.println( "Ggreska u liniji " +
              parser.getLine() +
              ": promenljiva " + ime +
              " nije deklarisana.");
              parser.errNo++;
              }
              else
              {
              var.last_def = parser.getLine();
              if (i.tkind == Type.CHARACTER && (var.type.tkind == Type.INTEGER || var.type.tkind == Type.FLOAT))
              {
                System.out.println( "Ggreska u liniji "
                + parser.getLine() +
                ": Nema implicitne konverzije iz tipa " +i.name +"u tip" + var.type.name + ".");
                parser.errNo++;
              }
              else if(i.kind == Type.INTEGER && var.type.kind == Type.FLOAT){
                 System.out.println( "Ggreska u liniji "
                                + parser.getLine() +
                                ": Nema implicitne konverzije iz tipa " +i.name +"u tip" + var.type.name + ".");
                                parser.errNo++;
              }
              }
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= CaseStatement 
            {
              Object RESULT = null;
		
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              Type RESULT = null;
		
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              Type RESULT = null;
		
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Type RESULT = null;
		
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                RESULT = new ArrayList();
                RESULT.add( ime );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                RESULT = niz;
                RESULT.add( ime );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Type NameList SEMICOLON 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
                  for ( int i=0; i<niz.size(); i++ )
                  {
                    String ime = (String) niz.get(i);
                    if ( ! parser.symbolTable.addVar(ime, t ) )
                    {
                      System.out.println(
                        "Greska u liniji " +
                        parser.getLine() + ": " +
                        "Promenljiva " + ime +
                        " je vec deklarisana." );
                        parser.errNo++;
                    }
                  }
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declarations ::= 
            {
              Object RESULT = null;
		
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;
		
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LEFTCURLYPAR Declarations StatementList RIGHTCURLYPAR 
            {
              Object RESULT = null;
		
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

