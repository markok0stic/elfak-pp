
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 19 20:30:50 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Mon Dec 19 20:30:50 CET 2022
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\004" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\004\000\002\007\003\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\012\006" +
    "\000\002\012\006\000\002\012\003\000\002\013\011\000" +
    "\002\013\011\000\002\013\007\000\002\014\004\000\002" +
    "\014\003\000\002\015\006\000\002\015\005\000\002\016" +
    "\005\000\002\016\005\000\002\017\003\000\002\017\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\004\005\001\002\000\004\002\101\001" +
    "\002\000\004\016\006\001\002\000\004\017\007\001\002" +
    "\000\006\003\010\020\012\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\004\003\013\001\002" +
    "\000\020\002\ufffc\003\ufffc\010\ufffc\011\ufffc\012\ufffc\020" +
    "\ufffc\021\ufffc\001\002\000\016\005\016\006\027\007\026" +
    "\010\025\012\023\020\012\001\002\000\006\003\073\012" +
    "\072\001\002\000\006\003\ufff5\012\ufff5\001\002\000\016" +
    "\003\uffed\010\uffed\011\uffed\012\uffed\020\uffed\021\uffed\001" +
    "\002\000\014\003\067\010\025\012\023\020\012\021\071" +
    "\001\002\000\016\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012" +
    "\ufffb\020\ufffb\001\002\000\014\003\ufff1\010\ufff1\012\ufff1" +
    "\020\ufff1\021\ufff1\001\002\000\004\022\063\001\002\000" +
    "\016\003\ufff0\010\ufff0\011\ufff0\012\ufff0\020\ufff0\021\ufff0" +
    "\001\002\000\004\016\030\001\002\000\006\003\ufff3\012" +
    "\ufff3\001\002\000\006\003\ufff4\012\ufff4\001\002\000\002" +
    "\001\002\000\010\014\034\015\035\017\032\001\002\000" +
    "\006\003\047\020\050\001\002\000\012\003\041\012\037" +
    "\013\036\016\042\001\002\000\012\003\uffe3\012\uffe3\013" +
    "\uffe3\016\uffe3\001\002\000\012\003\uffe2\012\uffe2\013\uffe2" +
    "\016\uffe2\001\002\000\014\003\uffe0\014\uffe0\015\uffe0\017" +
    "\uffe0\023\uffe0\001\002\000\014\003\uffe1\014\uffe1\015\uffe1" +
    "\017\uffe1\023\uffe1\001\002\000\014\003\uffe5\014\uffe5\015" +
    "\uffe5\017\uffe5\023\uffe5\001\002\000\014\003\uffe4\014\uffe4" +
    "\015\uffe4\017\uffe4\023\uffe4\001\002\000\004\003\043\001" +
    "\002\000\014\003\uffdd\014\uffdd\015\uffdd\017\uffdd\023\uffdd" +
    "\001\002\000\012\003\046\014\034\015\035\017\045\001" +
    "\002\000\014\003\uffdf\014\uffdf\015\uffdf\017\uffdf\023\uffdf" +
    "\001\002\000\014\003\uffde\014\uffde\015\uffde\017\uffde\023" +
    "\uffde\001\002\000\016\003\uffea\010\uffea\011\uffea\012\uffea" +
    "\020\uffea\021\uffea\001\002\000\004\011\053\001\002\000" +
    "\010\003\uffe8\011\uffe8\021\uffe8\001\002\000\010\003\060" +
    "\011\053\021\062\001\002\000\004\013\054\001\002\000" +
    "\006\003\055\025\056\001\002\000\010\003\uffe6\011\uffe6" +
    "\021\uffe6\001\002\000\010\010\025\012\023\020\012\001" +
    "\002\000\010\003\uffe7\011\uffe7\021\uffe7\001\002\000\016" +
    "\003\uffeb\010\uffeb\011\uffeb\012\uffeb\020\uffeb\021\uffeb\001" +
    "\002\000\010\003\uffe9\011\uffe9\021\uffe9\001\002\000\016" +
    "\003\uffec\010\uffec\011\uffec\012\uffec\020\uffec\021\uffec\001" +
    "\002\000\002\001\002\000\012\003\066\014\034\015\035" +
    "\023\065\001\002\000\016\003\uffef\010\uffef\011\uffef\012" +
    "\uffef\020\uffef\021\uffef\001\002\000\016\003\uffee\010\uffee" +
    "\011\uffee\012\uffee\020\uffee\021\uffee\001\002\000\020\002" +
    "\ufffd\003\ufffd\010\ufffd\011\ufffd\012\ufffd\020\ufffd\021\ufffd" +
    "\001\002\000\014\003\ufff2\010\ufff2\012\ufff2\020\ufff2\021" +
    "\ufff2\001\002\000\020\002\ufffe\003\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\020\ufffe\021\ufffe\001\002\000\010\003\ufff7\023" +
    "\ufff7\024\ufff7\001\002\000\016\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\012\ufff8\020\ufff8\001\002\000\010\003\077\023" +
    "\076\024\075\001\002\000\004\012\100\001\002\000\016" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\020\ufffa\001" +
    "\002\000\016\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9" +
    "\020\ufff9\001\002\000\010\003\ufff6\023\ufff6\024\ufff6\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\013\001" +
    "\001\000\002\001\001\000\016\004\016\006\020\010\014" +
    "\011\017\012\021\013\023\001\001\000\004\007\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\016" +
    "\012\067\013\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\030\001" +
    "\001\000\004\017\032\001\001\000\002\001\001\000\004" +
    "\020\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\043\001\001\000\002\001\001\000" +
    "\004\017\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\051\015\050\001\001\000" +
    "\002\001\001\000\004\015\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\016\012" +
    "\056\013\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\063\001" +
    "\001\000\004\017\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public int errNo = 0;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   if ( parser.errNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

   public void syntax_error(Symbol cur_token)
   {

   }

   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }

   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Term ::= LEFTPAR error 
            {
              Object RESULT = null;
		
           System.out.println( "Greska u liniji " + parser.getLine() + ": " +
           	"Nedostaje expression.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Term ::= LEFTPAR Expression error 
            {
              Object RESULT = null;
		
          System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                     	"Nedostaje ')'.");
                       parser.errNo++;
       
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Term ::= CONST 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Term ::= ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AddOperator ::= MINUS 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AddOperator ::= PLUS 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= Expression AddOperator error 
            {
              Object RESULT = null;
		
             System.out.println( "Nedostaje Term nakon operatora." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= Expression AddOperator Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WhenStatement ::= WHEN CONST error 
            {
              Object RESULT = null;
		
                System.out.println( "Nedostaje ':'." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WhenStatement ::= WHEN CONST COLON Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WhenStatementList ::= WhenStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WhenStatementList ::= WhenStatementList WhenStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR error 
            {
              Object RESULT = null;
		
                System.out.println( "Nedostaje '{'." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTCURLYPAR WhenStatementList error 
            {
              Object RESULT = null;
		
                System.out.println( "Nedostaje '}'." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTCURLYPAR WhenStatementList RIGHTCURLYPAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		
             System.out.println( "Nedostaje ;." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= CaseStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StatementList ::= Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= FLOAT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= CHAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NameList ::= ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= Type error 
            {
              Object RESULT = null;
		
                System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                "Nedostaje identifikator." );
                parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= Type NameList error 
            {
              Object RESULT = null;
		
                System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                "Nedostaje ';' ." );
                parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type NameList SEMICOLON 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= LEFTCURLYPAR error 
            {
              Object RESULT = null;
		
                System.out.println( "Nedostaje telo funkcije!" );
                parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= LEFTCURLYPAR Declarations StatementList error 
            {
              Object RESULT = null;
		
                System.out.println( "Nedostaje '}'!" );
                parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Block ::= LEFTCURLYPAR Declarations StatementList RIGHTCURLYPAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LEFTPAR RIGHTPAR error 
            {
              Object RESULT = null;
		
               System.out.println( "Nedostaje implementacija funckije!" );
               parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

