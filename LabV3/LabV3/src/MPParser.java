
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 19 17:09:45 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Mon Dec 19 17:09:45 CET 2022
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\003\006\000\002\002\004\000\002\004" +
    "\006\000\002\005\004\000\002\005\002\000\002\006\005" +
    "\000\002\007\003\000\002\007\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\004\000\002" +
    "\011\003\000\002\012\003\000\002\012\006\000\002\012" +
    "\003\000\002\013\011\000\002\014\004\000\002\014\003" +
    "\000\002\015\006\000\002\016\005\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\004\005\001\002\000\004\002\066\001" +
    "\002\000\004\016\006\001\002\000\004\017\007\001\002" +
    "\000\004\020\011\001\002\000\004\002\001\001\002\000" +
    "\016\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd\020\ufffd" +
    "\001\002\000\016\005\014\006\024\007\025\010\023\012" +
    "\021\020\011\001\002\000\004\012\061\001\002\000\004" +
    "\012\ufff9\001\002\000\014\010\ufff2\011\ufff2\012\ufff2\020" +
    "\ufff2\021\ufff2\001\002\000\012\010\023\012\021\020\011" +
    "\021\060\001\002\000\016\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\012\ufffe\020\ufffe\001\002\000\012\010\ufff5\012\ufff5" +
    "\020\ufff5\021\ufff5\001\002\000\004\022\054\001\002\000" +
    "\014\010\ufff4\011\ufff4\012\ufff4\020\ufff4\021\ufff4\001\002" +
    "\000\004\016\026\001\002\000\004\012\ufff8\001\002\000" +
    "\004\012\ufff7\001\002\000\010\012\030\013\027\016\033" +
    "\001\002\000\012\014\uffe8\015\uffe8\017\uffe8\023\uffe8\001" +
    "\002\000\012\014\uffe9\015\uffe9\017\uffe9\023\uffe9\001\002" +
    "\000\012\014\uffec\015\uffec\017\uffec\023\uffec\001\002\000" +
    "\010\014\037\015\040\017\042\001\002\000\010\012\030" +
    "\013\027\016\033\001\002\000\010\014\037\015\040\017" +
    "\035\001\002\000\012\014\uffe7\015\uffe7\017\uffe7\023\uffe7" +
    "\001\002\000\010\012\030\013\027\016\033\001\002\000" +
    "\010\012\uffeb\013\uffeb\016\uffeb\001\002\000\010\012\uffea" +
    "\013\uffea\016\uffea\001\002\000\012\014\uffed\015\uffed\017" +
    "\uffed\023\uffed\001\002\000\004\020\043\001\002\000\004" +
    "\011\046\001\002\000\006\011\uffef\021\uffef\001\002\000" +
    "\006\011\046\021\053\001\002\000\004\013\047\001\002" +
    "\000\004\025\050\001\002\000\010\010\023\012\021\020" +
    "\011\001\002\000\006\011\uffee\021\uffee\001\002\000\006" +
    "\011\ufff0\021\ufff0\001\002\000\014\010\ufff1\011\ufff1\012" +
    "\ufff1\020\ufff1\021\ufff1\001\002\000\010\012\030\013\027" +
    "\016\033\001\002\000\010\014\037\015\040\023\056\001" +
    "\002\000\014\010\ufff3\011\ufff3\012\ufff3\020\ufff3\021\ufff3" +
    "\001\002\000\012\010\ufff6\012\ufff6\020\ufff6\021\ufff6\001" +
    "\002\000\016\002\uffff\010\uffff\011\uffff\012\uffff\020\uffff" +
    "\021\uffff\001\002\000\006\023\ufffb\024\ufffb\001\002\000" +
    "\006\023\064\024\063\001\002\000\004\012\065\001\002" +
    "\000\016\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\020" +
    "\ufffc\001\002\000\006\023\ufffa\024\ufffa\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\016\004" +
    "\014\006\016\010\012\011\015\012\017\013\021\001\001" +
    "\000\004\007\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\014\012\056\013\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\031\020\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\035\001\001" +
    "\000\006\016\033\020\030\001\001\000\004\017\035\001" +
    "\001\000\002\001\001\000\004\020\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\044\015\043\001\001\000\002\001\001" +
    "\000\004\015\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\014\012\050\013\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\054\020\030\001\001\000\004\017\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 26." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Term ::= CONST 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 25." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Term ::= ID 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 24." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AddOperator ::= MINUS 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 23." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AddOperator ::= PLUS 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 22." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Term 
            {
              Object RESULT = null;
		
             System.out.println( "Redukcija po smeni 21." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression AddOperator Term 
            {
              Object RESULT = null;
		
             System.out.println( "Redukcija po smeni 20." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WhenStatement ::= WHEN CONST COLON Statement 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 19." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*WhenStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // WhenStatementList ::= WhenStatement 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 18." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WhenStatementList ::= WhenStatementList WhenStatement 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 17." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*WhenStatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CaseStatement ::= CASE LEFTPAR Expression RIGHTPAR LEFTCURLYPAR WhenStatementList RIGHTCURLYPAR 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 16." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*CaseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Block 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 15." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 14." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= CaseStatement 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 13." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 12." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 11." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 10." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 9." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 8." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 7." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= ID 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 6." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Type NameList SEMICOLON 
            {
              Object RESULT = null;
		
                   System.out.println( "Redukcija po smeni 5 ." );
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declarations ::= 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 4." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LEFTCURLYPAR Declarations StatementList RIGHTCURLYPAR 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 2." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

